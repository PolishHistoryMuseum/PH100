/**
 * Copyright 2010 Muzeum Historii Polski w Warszawie
 *
 * This file is part of PH100.
 *
 * PH100 is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * PH100 is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along
 * with PH100. If not, see <http://www.gnu.org/licenses/>.
 */


package PHControls;

import java.awt.Component;
import java.util.LinkedList;
import javax.swing.JPanel;
import mhp_ph.RecordExtender;
import mhp_ph.phArt;

/**
 * Results tab
 * @author paulx
 */
public class PHresults extends javax.swing.JPanel {

    /** Creates new form PHresults */
    public PHresults() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pHscroll1 = new PHControls.PHscroll();

        setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pHscroll1, javax.swing.GroupLayout.DEFAULT_SIZE, 410, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pHscroll1, javax.swing.GroupLayout.DEFAULT_SIZE, 311, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    public PHControls.PHscroll pHscroll1;
    // End of variables declaration//GEN-END:variables

    /**
     * Gets panel
     * @return Panel
     */
    public JPanel getPanel()
    {
        return pHscroll1.getPanel();
    }

    /**
     * Select all articles
     */
    public void selectAll()
    {
        for (Component c : pHscroll1.getPanel().getComponents())
        {
            PHrecord p = (PHrecord) c;
            p.select.setSelected(true);
        }
    }

    /**
     * Deselect all articles
     */
    public void deselectAll()
    {
        for (Component c : pHscroll1.getPanel().getComponents())
        {
            PHrecord p = (PHrecord) c;
            p.select.setSelected(false);
        }
    }

    /**
     * Remove selected articles
     */
    public void removeSelected()
    {
        int i = 0;
        while (i < pHscroll1.getPanel().getComponentCount())
        {
            if (((PHrecord)pHscroll1.getPanel().getComponent(i)).select.isSelected())
            {
                pHscroll1.getPanel().remove(i);
            } else {
                i++;
            }
        }
        i = 0;
        for (Component c : pHscroll1.getPanel().getComponents())
        {
            PHrecord p = (PHrecord) c;
            p.setNumber(++i);
        }
        pHscroll1.getPanel().revalidate();
        pHscroll1.getPanel().repaint();
    }

    /**
     * Copy selected articles to clipboard
     * @param clipboard
     */
    public void copy(PHresults clipboard)
    {
        for (Component c : getPanel().getComponents())
        {
            PHrecord p = (PHrecord) c;
            if (p.select.isSelected())
            {
                clipboard.addArt(p.recordData);
            }
        }
    }

    /**
     * Gets selected articles
     * @return Selected articles
     */
    public LinkedList<phArt> getSelected()
    {
        LinkedList<phArt> ll = new LinkedList<phArt>();
        for (Component c : getPanel().getComponents())
        {
            PHrecord p = (PHrecord) c;
            if (p.select.isSelected())
            {
                ll.add(p.recordData);
            }
        }
        return ll;
    }

    /**
     * Check if article exists in container
     * @param p Article
     * @return If already exists
     */
    public boolean artExists(phArt p)
    {
        for (Component c : getPanel().getComponents())
        {
            PHrecord r = (PHrecord) c;
            if (r.recordData.isSame(p))
            {
                return true;
            }
        }
        return false;
    }

    /**
     * Add article to container
     * @param p Article
     */
    public void addArt(phArt p)
    {
        if (!artExists(p))
        {
            PHrecord r = new PHrecord();
            r.refreshData(p, getPanel().getComponents().length + 1);
            getPanel().add(r);
            r.setVisible(true);
            r.overrideLayoutSimple();
            r.addMouseListener(new RecordExtender(r));
        }
    }
}
