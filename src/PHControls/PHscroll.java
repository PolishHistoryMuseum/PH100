/**
 * Copyright 2010 Muzeum Historii Polski w Warszawie
 *
 * This file is part of PH100.
 *
 * PH100 is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * PH100 is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along
 * with PH100. If not, see <http://www.gnu.org/licenses/>.
 */


package PHControls;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Rectangle;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JPanel;
import javax.swing.JScrollBar;
import javax.swing.JScrollPane;
import javax.swing.plaf.basic.BasicArrowButton;
import javax.swing.plaf.basic.BasicScrollBarUI;

/**
 * Panel with custom scroll bar
 * @author paulx
 */
public class PHscroll extends javax.swing.JPanel {
    PHbar bar; ///< Scroll bar

    /** Creates new form PHscroll */
    public PHscroll() {
        initComponents();
        jScrollPane1.getVerticalScrollBar().setUI(new PHscrollUI());
        jScrollPane1.getVerticalScrollBar().setUnitIncrement(16);
        jScrollPane1.getVerticalScrollBar().setBlockIncrement(128);
/*        bar = new PHbar();
        bar.setOpaque(true);
        bar.setUI(new BasicScrollBarUI());
        jScrollPane1.setVerticalScrollBar(bar); */
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();

        setBackground(new java.awt.Color(255, 255, 255));
        setAlignmentX(0.0F);
        setAlignmentY(0.0F);

        jScrollPane1.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane1.setBorder(null);
        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setAlignmentX(0.0F);
        jScrollPane1.setAlignmentY(0.0F);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setAlignmentY(0.0F);
        jPanel1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.Y_AXIS));
        jScrollPane1.setViewportView(jPanel1);
        jPanel1.getAccessibleContext().setAccessibleParent(this);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    /**
     * Gets panel
     * @return Panel
     */
    public JPanel getPanel()
    {
        return jPanel1;
    }

    /**
     * Gets scroll
     * @return Scroll
     */
    public JScrollPane getScroll()
    {
        return jScrollPane1;
    }

    /**
     * Custom scroll bar
     * @author paulx
     */
    private class PHbar extends JScrollBar
    {
        public PHbar()
        {
            super();
        }

        @Override
        public void paintComponent(Graphics g)
        {
            super.paintComponent(g);
//            g.setColor(new Color(255, 255, 255));
//            g.fillRect(0, 0, getSize().width, getSize().height);
        }
    }

    /**
     * Custom scroll bar UI
     * @author paulx
     */
    private class PHscrollUI extends BasicScrollBarUI
    {
        public PHscrollUI() {
            super();
        }

        @Override
        protected void paintThumb(Graphics g, JComponent j, Rectangle thumbBounds)
        {
            g.setColor(new Color(222, 222, 222));
            g.fillRect(thumbBounds.x + thumbBounds.width - 13, thumbBounds.y, 8, thumbBounds.height);
            g.setColor(new Color(166, 166, 166));
            g.fillRect(thumbBounds.x + thumbBounds.width - 12, thumbBounds.y + 1, 6, thumbBounds.height - 2);
        }

        @Override
        protected void paintTrack(Graphics g, JComponent j, Rectangle trackBounds)
        {
            g.setColor(new Color(255, 255, 255));
            g.fillRect(trackBounds.x, trackBounds.y, trackBounds.width, trackBounds.height);
            g.setColor(new Color(222, 222, 222));
            g.fillRect(trackBounds.x + trackBounds.width - 10, trackBounds.y, 2, trackBounds.height);
        }

        @Override
        protected JButton createDecreaseButton(int orientation)
        {
            return new ArrowButton(orientation);
        }

        @Override
        protected JButton createIncreaseButton(int orientation)
        {
            return new ArrowButton(orientation);
        }
    }

    /**
     * Custom arrows UI
     * @author paulx
     */
    private class ArrowButton extends BasicArrowButton
    {
        public ArrowButton(int direction)
        {
            super(direction);
        }

        @Override
        public void paint(Graphics g)
        {
            g.setColor(new Color(255, 255, 255));
            g.fillRect(0, 0, getWidth(), getHeight());
            g.setColor(new Color(222, 222, 222));
            g.fillRect(getWidth() - 10, 0, 2, getHeight());
//            g.setColor(new Color(166, 166, 166));
//            paintTriangle(g, getWidth() / 2 - 2, getHeight() / 2 - 2, 4, direction, true);
        }
    }
}
