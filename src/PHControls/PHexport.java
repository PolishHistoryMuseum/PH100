/**
 * Copyright 2010 Muzeum Historii Polski w Warszawie
 *
 * This file is part of PH100.
 *
 * PH100 is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * PH100 is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along
 * with PH100. If not, see <http://www.gnu.org/licenses/>.
 */


package PHControls;

import java.io.File;
import java.util.LinkedList;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileFilter;
import mhp_ph.PHprint;
import mhp_ph.phArt;

/**
 * Export dialog
 * @author paulx
 */
public class PHexport extends javax.swing.JPanel {

    /** Creates new form PHexport */
    public PHexport() {
        initComponents();
        formatBN.setIcon(PHsingleIcon.getIcon());
        formatKH.setIcon(PHsingleIcon.getIcon());
        formatPH.setIcon(PHsingleIcon.getIcon());
        typeOdt.setIcon(PHsingleIcon.getIcon());
        typePdf.setIcon(PHsingleIcon.getIcon());
        typeRtf.setIcon(PHsingleIcon.getIcon());
        typeTxt.setIcon(PHsingleIcon.getIcon());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        format = new javax.swing.ButtonGroup();
        type = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        formatPH = new javax.swing.JRadioButton();
        formatKH = new javax.swing.JRadioButton();
        formatBN = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        typeTxt = new javax.swing.JRadioButton();
        typeRtf = new javax.swing.JRadioButton();
        typePdf = new javax.swing.JRadioButton();
        typeOdt = new javax.swing.JRadioButton();
        ok = new PHControls.PHtextButton();
        cancel = new PHControls.PHtextButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setMaximumSize(new java.awt.Dimension(260, 300));
        setMinimumSize(new java.awt.Dimension(260, 300));
        setPreferredSize(new java.awt.Dimension(260, 300));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Trebuchet MS", 0, 12));
        jLabel1.setText("Wybierz sposób zapisu bibliograficznego:");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, -1, -1));

        formatPH.setBackground(new java.awt.Color(255, 255, 255));
        format.add(formatPH);
        formatPH.setFont(new java.awt.Font("Trebuchet MS", 0, 12));
        formatPH.setForeground(new java.awt.Color(64, 64, 64));
        formatPH.setSelected(true);
        formatPH.setText("wg Przeglądu Historycznego");
        add(formatPH, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, -1, -1));

        formatKH.setBackground(new java.awt.Color(255, 255, 255));
        format.add(formatKH);
        formatKH.setFont(new java.awt.Font("Trebuchet MS", 0, 12));
        formatKH.setForeground(new java.awt.Color(64, 64, 64));
        formatKH.setText("wg Kwartalnika Historycznego");
        add(formatKH, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 80, -1, -1));

        formatBN.setBackground(new java.awt.Color(255, 255, 255));
        format.add(formatBN);
        formatBN.setFont(new java.awt.Font("Trebuchet MS", 0, 12));
        formatBN.setForeground(new java.awt.Color(64, 64, 64));
        formatBN.setText("wg Biblioteki Narodowej");
        add(formatBN, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 110, -1, -1));

        jLabel2.setFont(new java.awt.Font("Trebuchet MS", 0, 12));
        jLabel2.setText("Wybierz format eksportowanych danych:");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 160, -1, -1));

        typeTxt.setBackground(new java.awt.Color(255, 255, 255));
        type.add(typeTxt);
        typeTxt.setFont(new java.awt.Font("Trebuchet MS", 0, 12));
        typeTxt.setForeground(new java.awt.Color(64, 64, 64));
        typeTxt.setText("zwykły tekst (.txt)");
        add(typeTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 190, -1, -1));

        typeRtf.setBackground(new java.awt.Color(255, 255, 255));
        type.add(typeRtf);
        typeRtf.setFont(new java.awt.Font("Trebuchet MS", 0, 12)); // NOI18N
        typeRtf.setForeground(new java.awt.Color(64, 64, 64));
        typeRtf.setText("Rich Text Format (.rtf)");
        add(typeRtf, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 220, -1, -1));

        typePdf.setBackground(new java.awt.Color(255, 255, 255));
        type.add(typePdf);
        typePdf.setFont(new java.awt.Font("Trebuchet MS", 0, 12));
        typePdf.setForeground(new java.awt.Color(64, 64, 64));
        typePdf.setSelected(true);
        typePdf.setText("PDF");
        add(typePdf, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 190, -1, -1));

        typeOdt.setBackground(new java.awt.Color(255, 255, 255));
        type.add(typeOdt);
        typeOdt.setFont(new java.awt.Font("Trebuchet MS", 0, 12));
        typeOdt.setForeground(new java.awt.Color(64, 64, 64));
        typeOdt.setText("ODT");
        add(typeOdt, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 220, -1, -1));

        ok.setText("OK");
        ok.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                okMouseClicked(evt);
            }
        });
        add(ok, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 260, 100, 24));

        cancel.setText("Anuluj");
        cancel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cancelMouseClicked(evt);
            }
        });
        add(cancel, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 260, 100, 24));
    }// </editor-fold>//GEN-END:initComponents

    private void cancelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cancelMouseClicked
        ((JDialog)getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_cancelMouseClicked

    private void okMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_okMouseClicked
        JFileChooser fc = new JFileChooser();
        String type = "";
        if (typeOdt.isSelected())
        {
            type = ".odt";
        } else if (typeTxt.isSelected()) {
            type = ".txt";
        } else if (typePdf.isSelected()) {
            type = ".pdf";
        } else if (typeRtf.isSelected()) {
            type = ".rtf";
        }
        FileFilter ff = fc.getFileFilter();
        fc.setFileFilter(new typeFilter(type));
        fc.removeChoosableFileFilter(ff);
        PHprint.format f = PHprint.format.ph;

        if (formatPH.isSelected())
        {
            f = PHprint.format.ph;
        } else if (formatKH.isSelected()) {
            f = PHprint.format.kh;
        } else if (formatBN.isSelected()) {
            f = PHprint.format.bn;
        }

        if (fc.showSaveDialog(getParent()) == JFileChooser.APPROVE_OPTION && !fc.getSelectedFile().getAbsolutePath().endsWith("\\"))
        {
            String n = fc.getSelectedFile().getAbsolutePath();
            if (!n.endsWith(type))
            {
                n += type;
            }
            if (typeOdt.isSelected())
            {
                PHprint.printOdt(ll, f, n);
            } else if (typePdf.isSelected()) {
                PHprint.printPdf(ll, f, n);
            } else if (typeTxt.isSelected()) {
                PHprint.printTxt(ll, f, n);
            } else if (typeRtf.isSelected()) {
                PHprint.printRtf(ll, f, n);
            }
            ((JDialog)getParent().getParent().getParent().getParent()).dispose();
        }
    }//GEN-LAST:event_okMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private PHControls.PHtextButton cancel;
    private javax.swing.ButtonGroup format;
    private javax.swing.JRadioButton formatBN;
    private javax.swing.JRadioButton formatKH;
    private javax.swing.JRadioButton formatPH;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private PHControls.PHtextButton ok;
    private javax.swing.ButtonGroup type;
    private javax.swing.JRadioButton typeOdt;
    private javax.swing.JRadioButton typePdf;
    private javax.swing.JRadioButton typeRtf;
    private javax.swing.JRadioButton typeTxt;
    // End of variables declaration//GEN-END:variables

    private LinkedList<phArt> ll; ///< Articles to export

    /**
     * Sets articles to export
     * @param l
     */
    public void setList(LinkedList<phArt> l)
    {
        ll = l;
    }

    /**
     * Filter for file dialog
     * @author paulx
     */
    private class typeFilter extends FileFilter
    {
        private String extension; ///< Selected extension

        /**
         * Constructor
         * @param e Extension
         */
        public typeFilter(String e)
        {
            extension = e;
        }

        @Override
        public boolean accept(File f)
        {
            if (f.isDirectory())
            {
                return true;
            }
            if (f.getName().endsWith(extension))
            {
                return true;
            }
            return false;
        }

        @Override
        public String getDescription() {
            return "Pliki " + extension;
        }
    }
}
